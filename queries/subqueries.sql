/*1. From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.*/

SELECT * FROM ORDERS 
WHERE salesman_id =(SELECT salesman_id FROM salesman
where name = 'Paul Adam');

-- 2. From the following tables write a SQL query to find all orders generated by London-based salespeople.
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

SELECT * FROM ORDERS 
WHERE salesman_id = (
    SELECT salesman_id FROM salesman
    WHERE CITY = "LONDON"
);

/*3. From the following tables write a SQL query to find all orders generated by the salespeople who 
may work for customers whose id is 5002. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.*/

SELECT * FROM ORDERS 
WHERE salesman_id IN (
    SELECT salesman_id FROM ORDERS
    WHERE salesman_id = 5002
);

-- 4. From the following tables write a SQL query to find the order values greater than the average 
-- order value of 10th October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

SELECT * FROM ORDERS 
WHERE purch_amt > (
    SELECT AVG(purch_amt) FROM ORDERS 
    WHERE ord_date = "2012-10-10"
);

/*5. From the following tables, write a SQL query to find all the orders generated in New York city.
 Return ord_no, purch_amt, ord_date, customer_id and salesman_id.*/

SELECT * FROM ORDERS 
WHERE salesman_id IN (
    SELECT salesman_id FROM salesman
    WHERE CITY = "NEW YORK"
);

-- 6. From the following tables write a SQL query to determine the commission of the salespeople in Paris.
--  Return commission.

SELECT commission 
FROM salesman 
WHERE CITY = "PARIS";

-- 7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
SELECT * FROM customers
WHERE customer_id IN (
    SELECT salesman_id - 2001
    FROM salesman
    WHERE NAME = "MC LYON"
);

-- 8. From the following tables write a SQL query to count the number of customers with grades above the 
-- average in New York City. Return grade and count.  

SELECT grade ,  COUNT(grade) 
FROM customers 
GROUP BY grade
HAVING grade > (
    SELECT AVG(grade) FROM customers
    WHERE CITY = "NEW YORK"
);

-- 9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission. 
-- Return ord_no, purch_amt, ord_date, and salesman_id.

SELECT * FROM ORDERS
WHERE salesman_id IN (
    SELECT salesman_id FROM salesman
    WHERE commission IN (
        SELECT MAX(commission) FROM salesman
    )
);

-- 10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012.
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.

SELECT * FROM customers
WHERE customer_id IN (
    SELECT customer_id FROM ORDERS
    WHERE ord_date = "2012-08-17"
);

-- 11. From the following tables write a SQL query to find salespeople who had more than one customer. 
-- Return salesman_id and name.

SELECT S.salesman_id , S.NAME 
FROM salesman S 
WHERE 1 < (
    SELECT COUNT(*)
    FROM customers
    WHERE salesman_id = S.salesman_id
);

-- 12. From the following tables write a SQL query to find those orders, which are higher than 
-- the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT * 
FROM ORDERS
WHERE purch_amt > (
    SELECT AVG(purch_amt) FROM ORDERS
);

-- 13. From the following tables write a SQL query to find those orders that are equal or higher than 
-- the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT * 
FROM ORDERS
WHERE purch_amt >= (
    SELECT AVG(purch_amt) FROM ORDERS
);

-- 14. Write a query to find the sums of the amounts from the orders table, grouped by date, and 
-- eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date.

SELECT ord_date , SUM(purch_amt)
FROM ORDERS A 
GROUP BY ord_date
HAVING SUM(purch_amt) > (
    SELECT 1000.00 + MAX(purch_amt) 
    FROM ORDERS B 
    WHERE A.ord_date = B.ord_date
);

-- 15. Write a query to extract all data from the customer table if and only if one or more of the 
-- customers in the customer table are located in London.

SELECT * 
FROM customers 
WHERE EXISTS (
    SELECT * FROM customers
    WHERE CITY = "LONDON"
);

-- 16. From the following tables write a SQL query to find salespeople who deal with multiple customers. 
-- Return salesman_id, name, city and commission.

SELECT * FROM salesman
WHERE salesman_id IN (
    SELECT DISTINCT B.salesman_id FROM customers B
    WHERE EXISTS
    (
        SELECT C.salesman_id FROM customers C 
        WHERE C.salesman_id = B.salesman_id AND C.cust_name <> B.cust_name
    )
);

-- 17. From the following tables write a SQL query to find salespeople who deal with a single customer. 
-- Return salesman_id, name, city and commission.

SELECT * FROM salesman
WHERE salesman_id IN (
    SELECT DISTINCT B.salesman_id FROM customers B
    WHERE NOT EXISTS
    (
        SELECT C.salesman_id FROM customers C 
        WHERE C.salesman_id = B.salesman_id AND C.cust_name <> B.cust_name
    )
); 

-- 18. From the following tables, write a SQL query to find the salespeople who deal the customers 
-- with more than one order. Return salesman_id, name, city and commission.
SELECT * FROM salesman B 
WHERE EXISTS(
    SELECT C.salesman_id FROM customers C 
    WHERE C.salesman_id = B.salesman_id
    AND 1 < (
        SELECT COUNT(*) 
        FROM ORDERS O 
        WHERE O.salesman_id = B.salesman_id
    )
);

-- 19. From the following tables write a SQL query to find all salespeople who are located in any 
-- city where there is at least one customer. Return salesman_id, name, city and commission.

SELECT * FROM salesman
WHERE CITY = ANY (
    SELECT CITY FROM customers
);

-- 20. From the following tables write a SQL query to find salespeople whose place of residence 
-- matches any city where customers live. Return salesman_id, name, city and commission.

SELECT * FROM salesman
WHERE CITY IN(
    SELECT CITY FROM customers 
);


-- 21. From the following tables write a SQL query to find all those salespeople whose names appear 
-- alphabetically lower than the customerâ€™s name. Return salesman_id, name, city, commission.

SELECT * FROM salesman S
WHERE EXISTS (
    SELECT NAME FROM customers C
    WHERE S.NAME < C.cust_name
);

-- 22. From the following table write a SQL query to find all those customers with a higher grade than 
-- all the customers alphabetically below the city of New York.
--  Return customer_id, cust_name, city, grade, salesman_id.

SELECT * FROM customers  
WHERE GRADE > ANY (
    SELECT GRADE FROM customers C2 
    WHERE C2.CITY < "NEW YORK"
);


-- 23. From the following table write a SQL query to find all those orders whose order amount exceeds 
-- at least one of the orders placed on September 10th 2012. Return ord_no, purch_amt, ord_date, customer_id
--  and salesman_id.

SELECT * FROM ORDERS O1 
WHERE purch_amt > ANY(
    SELECT purch_amt FROM ORDERS O2 
    WHERE O2.ord_date = "2012-09-10"
);

-- 24. From the following tables write a SQL query to find orders where the order amount is less than 
-- the order amount of a customer residing in London City. Return ord_no, purch_amt, ord_date, 
-- customer_id and salesman_id.


SELECT * FROM ORDERS O1
WHERE O1.purch_amt < ANY(
    SELECT O2.purch_amt FROM ORDERS O2
    WHERE O2.customer_id IN (
        SELECT C.customer_id
        FROM customers C
        WHERE C.CITY = "LONDON"
    )
);

-- 25. From the following tables write a SQL query to find those orders where every order amount 
-- is less than the maximum order amount of a customer who lives in London City. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

SELECT * FROM ORDERS O1
WHERE O1.purch_amt < (
    SELECT MAX(O2.purch_amt) FROM ORDERS O2
    WHERE O2.customer_id IN (
        SELECT C.customer_id
        FROM customers C
        WHERE C.CITY = "LONDON"
    )
);

-- 26. From the following tables write a SQL query to find those customers whose grades are higher 
-- than those living in New York City. Return customer_id, cust_name, city, grade and salesman_id.

SELECT * FROM customers
WHERE GRADE > ANY (
    SELECT GRADE FROM customers
    WHERE CITY = "NEW YORK"
);

-- 27. From the following tables write a SQL query to calculate the total order amount generated by a 
-- salesperson. Salespersons should be from the cities where the customers reside. 
-- Return salesperson name, city and total order amount.

SELECT S.NAME , S.CITY ,(
    SELECT SUM(O.purch_amt)
    FROM ORDERS O 
    WHERE O.salesman_id = S.salesman_id
)AS total_order_amt
FROM salesman S 
WHERE EXISTS (
    SELECT *
    FROM orders O
    WHERE O.salesman_id = S.salesman_id
    AND O.customer_id IN (
        SELECT C.customer_id
        FROM customers C
        WHERE C.city = S.city
    )
);

-- 28. From the following tables write a SQL query to find those customers whose grades are not the same 
-- as those who live in London City. Return customer_id, cust_name, city, grade and salesman_id.

SELECT * FROM customers C  
WHERE C.GRADE <> ANY (
    SELECT GRADE FROM customers
    WHERE CITY = "LONDON" AND GRADE IS NOT NULL
);

-- 29. From the following tables write a SQL query to find those customers whose grades are different 
-- from those living in Paris. Return customer_id, cust_name, city, grade and salesman_id.

SELECT * FROM customers
WHERE GRADE <> ANY (
    SELECT GRADE FROM customers
    WHERE CITY = "PARIS" AND GRADE IS NOT NULL
);

SELECT * FROM customers
WHERE GRADE NOT IN  (
    SELECT GRADE FROM customers
    WHERE CITY = "PARIS" AND GRADE IS NOT NULL
);

-- 30. From the following tables write a SQL query to find all those customers who have different grades 
-- than any customer who lives in Dallas City. Return customer_id, cust_name,city, grade and salesman_id.

SELECT * FROM customers
WHERE GRADE NOT IN (
    SELECT GRADE FROM customers
    WHERE CITY = "DALLAS"
);

-- 31. From the following tables write a SQL query to calculate the average price of each manufacturer's 
-- product along with their name. Return Average Price and Company.

SELECT AVG(P.PRO_PRICE) AS "AVG PRICE", (
    SELECT C.COM_NAME
    FROM Company C
    WHERE C.COM_ID = P.PRO_COM
) AS "COMPNAY NAME"
FROM PRODUCTS P 
GROUP BY PRO_COM;

-- 32. From the following tables write a SQL query to calculate the average price of each manufacturer's 
-- product of 350 or more. Return Average Price and Company.

SELECT AVG(P.PRO_PRICE) AS "AVG PRICE" ,(
    SELECT C.COM_NAME
    FROM Company C
    WHERE C.COM_ID = P.PRO_COM
) AS "COMPNAY NAME"
FROM PRODUCTS P 
GROUP BY PRO_COM
HAVING AVG(P.PRO_PRICE) >=350;

-- 33. From the following tables, write a SQL query to find the most expensive product of each company. 
-- Return Product Name, Price and Company.
SELECT MAX(P.PRO_PRICE) AS "AVG PRICE" ,(
    SELECT C.COM_NAME
    FROM Company C
    WHERE C.COM_ID = P.PRO_COM
) AS "COMPNAY NAME"
FROM PRODUCTS P 
GROUP BY PRO_COM;

-- 34. From the following tables write a SQL query to find employees whose last name is Gabriel or Dosio. 
-- Return emp_idno, emp_fname, emp_lname and emp_dept.

SELECT * FROM employees
WHERE emp_lname IN ('Gabriel' , 'Dosio');

-- 35. From the following tables, write a SQL query to find the employees who work in department 89 or 63. 
-- Return emp_idno, emp_fname, emp_lname and emp_dept.

SELECT * FROM employees
WHERE emp_dept IN (89 , 63);

-- 36. From the following tables write a SQL query to find those employees who work for the department where 
-- the departmental allotment amount is more than Rs. 50000. Return emp_fname and emp_lname.

SELECT E.emp_fname , E.emp_lname
FROM employees E 
WHERE EXISTS  (
    SELECT DPT_CODE 
    FROM department 
    WHERE E.emp_dept = DPT_CODE
    AND DPT_ALLOTMENT > 50000
);

-- 37. From the following tables write a SQL query to find the departments whose sanction amount is higher 
-- than the average sanction amount for all departments. Return dpt_code, dpt_name and dpt_allotment.

SELECT * FROM department
WHERE DPT_ALLOTMENT > (
    SELECT AVG(DPT_ALLOTMENT) FROM department
);

-- 38. From the following tables write a SQL query to find which departments have more than two employees. 
-- Return dpt_name.

SELECT D.dpt_name 
FROM department D
WHERE 2 <(
    SELECT COUNT(*) FROM employees E 
    WHERE E.emp_dept = D.DPT_CODE
);

-- 39. From the following tables write a SQL query to find the departments with the second lowest 
-- sanction amount. Return emp_fname and emp_lname.
SELECT E.emp_fname , E.emp_lname
FROM employees E 
WHERE E.emp_dept = (
    SELECT DPT_CODE FROM department
    WHERE DPT_ALLOTMENT = (
        SELECT MIN(DPT_ALLOTMENT) FROM department
        WHERE DPT_ALLOTMENT > (
            SELECT MIN(DPT_ALLOTMENT) FROM department
        )
    )
);
